@using DotNetDocs.Services.Models
@using DotNetDocs.Web.Extensions

@inject NavigationManager Navigation

<div class="card mb-4">
    <a href="@Show.Url" title="Watch this episode">
        <img class="card-img-top img-fluid" src='@(Show.ShowImage ?? $"default-thumb.png")' alt="Thumbnail of episode">
    </a>
    <div class="card-body">
        <h5 class="card-title">
            <a href="@Show.Url" title="Watch this episode">
                @Show.Title<br />
            </a>
        </h5>
        <p class="card-text">
            @(Show.ToGeneralDescription())
            <hr>
            <Tags TagValues="Tags" />
        </p>
    </div>
    <div class="card-footer">
        <small class="text-muted">@(Show.IsScheduled ?  Show.Date!.Value.ToString("MMM dd, yyyy") : "TBD")</small>
        <AuthorizeView>
            <button class="btn btn-sm btn-secondary float-right ml-2" title='Edit "@(Show.Title)"?'
                    @onclick="@(_ => Navigation.NavigateTo($"/admin/show/{Show.Id}"))">
                <span class="oi oi-pencil"></span>
            </button>
        </AuthorizeView>

        @if (Show.IsInFuture)
        {
            <a href="@(Show.AddToGoogleCalendar())" target="_blank" class="float-right ml-2">Add to calendar?</a>
        }
        else if (Show.IsNew)
        {
            <span class="badge badge-success float-right ml-2">New</span>
        }
    </div>
</div>
@if (IsDivisableBy(1))
{
<div class="w-100 d-none d-sm-block d-md-none"><!-- wrap every 1 on sm--></div>
}
@if (IsDivisableBy(2))
{
<div class="w-100 d-none d-md-block d-lg-none"><!-- wrap every 2 on md--></div>
}
@if (IsDivisableBy(3))
{
<div class="w-100 d-none d-lg-block d-xl-none"><!-- wrap every 3 on lg--></div>
}
@if (IsDivisableBy(4))
{
<div class="w-100 d-none d-xl-block"><!-- wrap every 5 on xl--></div>
}

@code {
    [Parameter]
    public DocsShow Show { get; set; } = null!;

    [Parameter]
    public int Index { get; set; }

    bool IsDivisableBy(int number) => (Index + 1) % number == 0;

    IDictionary<string, string> Tags =>
            Show.Tags
                .Select(tag => (tag: tag, color: ""))
                .Concat(
                    Show.Guests
                        .Where(p => p.IsMicrosoftMvp)
                        .Select(p => (tag: p.ToMvpUrl(), color: "badge-mvp")))
                .ToDictionary(t => t.tag, t => t.color);
}
