@using DotNetDocs.Services.Models
@using DotNetDocs.Web.Extensions
@using DotNetDocs.Web.Interop 

@inject IJSRuntime JavaScript

<div class="jumbotron" id="@Id">
    <div class="container text-center text-lg-left">
        <div class="row">
            @if (IsShowStarting)
            {
                <div class="embed-responsive embed-responsive-16by9">
                    <iframe src="https://player.twitch.tv/?channel=thedotnetdocs&parent=dotnetdocs.dev&muted=true"
                            class="embed-responsive-item" theme="dark" allowfullscreen>
                    </iframe>
                </div>
            }
            else
            {
                <div class="col-lg-8">
                    <h2 class="display-4">@Show.Title</h2>
                    <p class="lead">@(Show.ToGeneralDescription())</p>
                    <div class="row pb-4">
                        <div class="col-md-8 pb-2">
                            <CountDownTimer ShowTime="@Show.Date!.Value" ShowIsStarting="OnShowIsStarting" />
                        </div>
                        <div class="col-md-4">
                            <span class="text-center pb-2 d-inline-block">
                                <a class="btn btn-dotnet btn-lg w-100" href="@(Show.AddToGoogleCalendar())" target="_blank" role="button">
                                    <span class="oi oi-plus"></span> &nbsp; Add to calendar</a>
                            </span>
                            <span>
                                <a href="https://twitter.com/share?ref_src=twsrc%5Etfw" class="twitter-share-button" data-size="large"
                                   data-text="@TweetText" data-url="https://dotnetdocs.dev/" data-show-count="false">Tweet</a>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 align-items-center d-flex">
                    <img src='@(Show.ShowImage ?? "default-thumb.png")' alt="Thumbnail of episode" class="img-fluid">
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public DocsShow Show { get; set; } = null!;

    [Parameter]
    public string Id { get; set; } = null!;

    bool IsShowStarting = false;

    IDictionary<string, string> Tags =>
            Show.Tags
                .Select(tag => (tag: tag, color: ""))
                .Concat(
                    Show.Guests
                        .Where(p => p.IsMicrosoftMvp)
                        .Select(p => (tag: p.ToMvpUrl(), color: "badge-mvp")))
                .ToDictionary(t => t.tag, t => t.color);

    string TweetText =>
        $"Tune in to The .NET Docs Show: {Show.Title} - {Show.Guests.First().TwitterHandle}, live at {Show.Date!.Value:yyyy-MM-dd hh:mm tt} US/Central\n\n#TheDotNetDocsShow";

    protected override async Task OnAfterRenderAsync(bool firstRender) =>
        await Utilities.NudgeTwitterAsync(JavaScript);

    async Task OnShowIsStarting(bool isStarting)
    {
        IsShowStarting = isStarting;
        await InvokeAsync(() => StateHasChanged());
    }
}
