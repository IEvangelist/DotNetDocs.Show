@using DotNetDocs.Services
@inject TwitchService TwitchService

@if (Images != null)
{
    <div id="showImages" class="carousel slide" data-ride="carousel" data-interval="false">
        <ol class="carousel-indicators">
            @foreach (var (_, index) in Images.Select((url, index) => (url, index)))
            {
                <li data-target="#showImages" data-slide-to="@index" class='@(index == 0 ? "active" : "")'></li>
            }
        </ol>
        <div class="carousel-inner">
            @foreach (var (url, index) in Images.Select((url, index) => (url, index)))
            {
                <div class='carousel-item @(index == 0 ? "active" : "")'>
                    <img class="d-block w-100 clickable" src="@url" alt="Image @(index + 1)"
                         @ondblclick="@(async _ => await OnThumbnailChanged(url))">
                </div>
            }
        </div>
        <a class="carousel-control-prev" href="#showImages" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#showImages" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
}

@code {
    [Parameter]
    public int VideoId { get; set; }

    [Parameter]
    public EventCallback<string> ThumbnailChanged { get; set; }

    IEnumerable<string>? Images { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        var video = await TwitchService.GetTwitchVideoAsync(VideoId);
        if (video is null)
        {
            return;
        }

        Images = video.Thumbnails?.Large?.Where(img => img.Url != null)?.Select(img => img.Url!);
        await base.OnParametersSetAsync();

        StateHasChanged();
    }

    Task OnThumbnailChanged(string thumbnailUrl) => ThumbnailChanged.InvokeAsync(thumbnailUrl!);
}
