@page "/schedule"

@using DotNetDocs.Web.Shared
@using DotNetDocs.Services
@using DotNetDocs.Services.Models

@inject IScheduleService ScheduleService

@if (_shows == null)
{
    <div class="d-flex align-items-center">
        <strong>Loading show schedule, please wait...</strong>
        <div class="spinner-border text-primary ml-auto" role="status" aria-hidden="true"></div>
    </div>
}
else if (!_shows.Any())
{
    <div class="alert alert-secondary alert-dismissible fade show" role="alert">
        <strong>😥</strong> No scheduled shows... check back later!
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
else
{
    <div class="row">
        @foreach (var show in _shows.OrderByDescending(show => show.Date))
        {
            <ShowDetails Model="show" />
        }
    </div>
}

@code {
    private IEnumerable<DocsShow> _shows = null!;

    protected override async Task OnInitializedAsync()
    {
        // Load the latest twelve episodes
        _shows = await ScheduleService.GetAllAsync(DateTime.Now.AddDays(12 * 7));
    }
}
